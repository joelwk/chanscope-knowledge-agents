# =============================================
# Basic Configuration
# =============================================
entrypoint = "main.py"
modules = ["python-3.10:v18-20230807-322e88b"]
hidden = [".pythonlibs"]
run = "bash scripts/replit_init.sh && poetry run python -m uvicorn api.app:app --host 0.0.0.0 --port 80"

# =============================================
# Nix Configuration
# =============================================
[nix]
channel = "stable-23_05"

# =============================================
# Environment Variables
# =============================================
[env]
REPLIT_ENV = "replit"
DEPLOYMENT_ENV = "replit"
API_PORT = "80"
API_HOST = "0.0.0.0"
LOG_LEVEL = "INFO"
AUTO_CHECK_DATA = "true"
FORCE_DATA_REFRESH = "false"
SKIP_EMBEDDINGS = "false"
PYTHONPATH = "${REPL_HOME}"
PYTHONUNBUFFERED = "1"

# Testing Configuration
TEST_MODE = "false"  # Default to false for deployment
USE_MOCK_DATA = "false"
USE_MOCK_EMBEDDINGS = "false"

# =============================================
# Deployment Configuration
# =============================================
[deployment]
run = ["bash", "scripts/replit_init.sh", "&&", "poetry", "run", "python", "-m", "uvicorn", "api.app:app", "--host", "0.0.0.0", "--port", "80"]
deploymentTarget = "cloudrun"

# =============================================
# Health Check Configuration
# =============================================
[deployment.healthCheck]
path = "/api/v1/health"
port = 80
initialDelay = 15    # Increased to allow for startup operations with Poetry
timeout = 5          # Increased for Poetry initialization
period = 30          # More frequent checks
consecutiveSuccesses = 1  # Only need one success to confirm health
consecutiveFailures = 3   # Increased for Poetry stability

[[ports]]
localPort = 80
externalPort = 80
exposeLocalhost = true

# =============================================
# Language Configuration
# =============================================
[languages]

[languages.python3]
pattern = "**/*.py"
syntax = "python"

[languages.python3.languageServer]
start = "pylsp"

# =============================================
# Package Manager Configuration
# =============================================
[packager]
language = "python3"

[packager.features]
packageSearch = true
guessImports = true

# =============================================
# UPM Configuration
# =============================================
[unitTest]
language = "python3"

# =============================================
# Interpreter Configuration
# =============================================
[interpreter]
command = ["poetry", "run", "python", "-u"]

[workflows]
runButton = "deploy"

[[workflows.workflow]]
name = "deploy"
mode = "sequential"
author = 38779469

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "bash scripts/replit_init.sh && poetry run python -m uvicorn api.app:app --host 0.0.0.0 --port 80"

[[workflows.workflow]]
name = "test"
mode = "sequential"
author = 38779469

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "poetry run bash scripts/run_tests.sh --env=replit"

[gitHubImport]
requiredFiles = [".replit", "replit.nix"]

[server]
host = "0.0.0.0"
port = 80

# Commands for Replit interface
[commands.test]
description = "Run tests in Replit environment"
command = "poetry run bash scripts/test.sh replit"

[commands.run-api]
description = "Run the API server"
command = "poetry run python -m uvicorn api.app:app --host 0.0.0.0 --port 80"

[commands.update-data]
description = "Run manual data update"
command = "poetry run python scripts/scheduled_update.py refresh"

[commands.check-db]
description = "Check Replit database connectivity"
command = "poetry run python scripts/check_replit_db.py"

[commands.initialize]
description = "Initialize Replit environment"
command = "bash scripts/replit_init.sh"

[commands.process-data]
description = "Process data stratification and embeddings"
command = "poetry run python scripts/process_data.py"

[commands.check-data-status]
description = "Check the status of data processing pipeline"
command = "poetry run python scripts/process_data.py --check"

[commands.force-data-refresh] 
description = "Force a complete data refresh including stratification and embeddings"
command = "poetry run python scripts/process_data.py --force-refresh"

[commands.test-stratification]
description = "Test the stratification and embedding processes directly"
command = "poetry run python scripts/test_stratification.py"

[commands.test-stratification-only]
description = "Test only the stratification process"
command = "poetry run python scripts/test_stratification.py --stratification-only"

[commands.test-embeddings-only]
description = "Test only the embedding generation process"
command = "poetry run python scripts/test_stratification.py --embeddings-only"