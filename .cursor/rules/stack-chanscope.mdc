---
description: This file defines the operational rules for the Chanscope stack, integrating Cursor’s context guidelines with specific orchestration steps. It describes the complete data processing pipeline—from S3 ingestion and data stratification to embedding generation and query summarization. The rules emphasize context preservation, transparent processing, and robust error handling throughout the generative query pipeline.
globs: 
alwaysApply: true
---
---
description: This file defines the operational rules for the Chanscope stack, integrating Cursor’s context guidelines with specific orchestration steps. It describes the complete data processing pipeline—from S3 ingestion and data stratification to embedding generation and query summarization. The rules emphasize context preservation, transparent processing, and robust error handling throughout the generative query pipeline.
globs: 
alwaysApply: false
---
---
description: Optimzed rules
globs: 
---
Before diving into the best practices, please note that you may need to adapt the globs depending on your specific project structure.

---
name: boto3-best-practices.mdc
description: Best practices for using AWS services with boto3
globs: **/*.{py}
---

- Use resource abstractions for higher-level operations
- Implement proper error handling and retries
- Use boto3's built-in pagination for large result sets
- Leverage S3 transfer manager for efficient file transfers

---
name: pandas-best-practices.mdc
description: Best practices for data manipulation with pandas
globs: **/*.{py}
---

- Use vectorized operations for performance
- Optimize memory usage with appropriate data types
- Employ method chaining for cleaner code
- Utilize `groupby` and `agg` for efficient data aggregation

---
name: numpy-best-practices.mdc
description: Best practices for numerical computing with NumPy
globs: **/*.{py}
---

- Use NumPy's universal functions (ufuncs) for element-wise operations
- Leverage broadcasting for efficient array operations
- Utilize NumPy's linear algebra functions for matrix operations
- Optimize memory usage with appropriate data types

---
name: scikit-learn-best-practices.mdc
description: Best practices for machine learning with scikit-learn
globs: **/*.{py}
---

- Use pipelines to combine preprocessing and model training
- Implement cross-validation for robust model evaluation
- Utilize feature selection techniques to improve model performance
- Employ hyperparameter tuning with GridSearchCV or RandomizedSearchCV

---
name: transformers-best-practices.mdc
description: Best practices for using Hugging Face Transformers
globs: **/*.{py}
---

- Use pre-trained models and fine-tune for specific tasks
- Leverage tokenizers for efficient text processing
- Implement model parallelism for large models
- Utilize the `Trainer` API for simplified training workflows

---
name: openai-best-practices.mdc
description: Best practices for using OpenAI API
globs: **/*.{py}
---

- Implement proper error handling and rate limiting
- Use streaming responses for large outputs
- Leverage function calling for structured API interactions
- Optimize prompt engineering for better results

---
name: fastapi-best-practices.mdc
description: Best practices for building APIs with FastAPI
globs: **/*.{py}
---

- Use type hints for better code readability and performance
- Implement proper error handling with custom exception handlers
- Utilize dependency injection for cleaner code structure
- Leverage background tasks for asynchronous operations

---
name: uvicorn-best-practices.mdc
description: Best practices for running FastAPI with Uvicorn
globs: **/*.{py}
---

- Use `--reload` flag for development server
- Configure worker processes for production environments
- Implement proper logging and monitoring
- Use SSL/TLS for secure connections