---
description: This addresses the specific linter errors in your Docker Compose files by providing guidance on proper schema usage, particularly focusing on adding version declarations that will resolve the errors
globs: */docker-compose*.yml
alwaysApply: false
---
## Docker Compose Schema Requirements

When working with Docker Compose files, ensure the following:

### 1. Version Declaration

Recent Docker Compose versions auto-detect the version, making explicit version declarations optional. In our codebase, we use a comment-based approach for version information:

```yaml
# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
# The version attribute is now auto-detected and the explicit declaration is obsolete
# Removed version: '3.8' to avoid warnings

services:
  # Services defined here
```

This approach:
- Provides schema information to IDE/linter tools
- Avoids version-related warnings
- Maintains compatibility with the Docker Compose tool

### 2. Top-Level Keys

For Docker Compose, the following top-level keys are valid:
- `services` (required)
- `networks` (optional)
- `volumes` (optional)
- `configs` (optional)
- `secrets` (optional)

### 3. Service Configuration

Each service must have valid properties according to the Docker Compose schema. Common required properties include:
- `image` or `build`
- `volumes` (if needed)
- `environment` or `env_file`
- `networks` (if using custom networks)

### 4. Volume Specifications

For volumes, use the new-style specification where possible:

```yaml
volumes:
  - type: volume
    source: app_data
    target: /app/data
    read_only: false
```

This format provides more clarity and control over volume properties compared to the older string format.

### 5. Environment Variables

Environment variables should be properly organized and commented:

```yaml
environment:
  # Docker environment settings
  - DOCKER_ENV=true
  - PYTHONPATH=/app
  
  # Data management settings
  - DATA_RETENTION_DAYS=14
  - ENABLE_DATA_SCHEDULER=true
```

### 6. Service Dependency Management

For services that depend on each other, use the `depends_on` directive with healthcheck conditions where appropriate:

```yaml
depends_on:
  db:
    condition: service_healthy
```

### 7. Healthcheck Configuration

Health checks should be properly configured with appropriate intervals and timeouts:

```yaml
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost/api/v1/health"]
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 300s  # Extended for data initialization
```

### 8. Resource Limits

Resource limits should be set appropriately for each environment:

```yaml
deploy:
  resources:
    limits:
      memory: 8G
      cpus: '4'
    reservations:
      memory: 2G
      cpus: '1'
```

## Schema Validation Process

When fixing Docker Compose linter errors:

1. Ensure the appropriate schema comment is present at the top of the file
2. Validate that all top-level keys are allowed
3. Ensure service configurations comply with the schema
4. Test the compose file with `docker-compose config` to validate syntax
5. If part of a multi-file setup, test with all relevant compose files

## Docker Compose File Organization

Our Docker Compose files follow this organization pattern:

1. **Schema comments** at the top
2. **Services** definitions with:
   - Build context
   - Volumes (grouped by purpose and commented)
   - User specification
   - Environment variables (grouped by purpose and commented)
   - Port mappings
   - Network configuration
   - Healthcheck configuration
   - Restart policy
   - Resource limits
3. **Networks** definitions
4. **Volumes** definitions

This organization makes it easier to read and maintain the Docker Compose files.

## Example of Properly Formatted Docker Compose File

```yaml
# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
# The version attribute is now auto-detected and the explicit declaration is obsolete

services:
  app:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    volumes:
      # Configuration files
      - type: bind
        source: ../.env
        target: /app/.env
        read_only: true
      # Application code
      - type: bind
        source: ../api
        target: /app/api
        read_only: true
      # Persistent volumes
      - type: volume
        source: app_data
        target: /app/data
      - type: volume
        source: app_logs
        target: /app/logs
    user: "nobody:nogroup"
    env_file:
      - ../.env
    environment:
      # Docker environment
      - DOCKER_ENV=true
      - PYTHONPATH=/app
      
      # Data management settings
      - DATA_RETENTION_DAYS=14
      - ENABLE_DATA_SCHEDULER=true
    ports:
      - "80:80"
    networks:
      knowledge-net:
        aliases:
          - knowledge-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s
    restart: unless-stopped

networks:
  knowledge-net:
    driver: bridge

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
```