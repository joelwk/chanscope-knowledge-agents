---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: Clarifies recommended workflows for testing and deployment to avoid confusion.
globs: */docker-compose*.yml, */scripts/run_*tests.sh
alwaysApply: false
---
# Chanscope Workflow Clarification

This rule explicitly clarifies recommended workflows for testing and deployment, ensuring clarity and maintainability across all environments.

## Recommended Workflow

### 1. Testing Workflow (Recommended)

#### Docker Environment
Run tests in isolation using the dedicated testing compose file:

```bash
docker-compose -f deployment/docker-compose.test.yml build
docker-compose -f deployment/docker-compose.test.yml up
```

- Ensures isolated test data and resources.
- Optimized environment variables and resource allocation for testing.

#### Replit Environment
Run tests in Replit using the dedicated setup script:

```bash
bash scripts/run_tests.sh --env=replit
```

- Automatically detects Replit environment.
- Uses resource-optimized settings for Replit's constraints.
- Creates necessary directories and mock data.

#### Local Environment
Run tests locally with:

```bash
bash scripts/run_tests.sh --env=local
```

- Uses local environment settings.
- Preserves local file system structure.

### 2. Production Deployment (Tests Disabled)

#### Docker Environment
Deploy your application without running tests at startup:

```bash
docker-compose -f deployment/docker-compose.yml build
docker-compose -f deployment/docker-compose.yml up -d
```

- Ensures stable, predictable startup behavior.
- Avoids resource contention and data integrity risks.

#### Replit Environment
Deploy in Replit using the main setup script:

```bash
bash deployment/setup.sh
```

- The `.replit` file is configured to run this automatically.
- Sets appropriate environment variables for Replit.
- Handles resource constraints automatically.

### 3. Integrated Test and Deploy (Advanced, Optional)

Running tests as part of deployment should be reserved for staging or pre-production environments:

#### Docker Environment
```bash
docker-compose -f deployment/docker-compose.yml build
docker-compose -f deployment/docker-compose.yml up -d -e RUN_TESTS_ON_STARTUP=true
```

#### Replit Environment
```bash
RUN_TESTS_ON_STARTUP=true bash deployment/setup.sh
```

- Requires careful handling of resource contention and data isolation.
- Not recommended for live production environments.
- In Replit, may exceed resource limits or timeout during deployment.

## Environment-Specific Considerations

### Replit Environment

1. **Resource Constraints**:
   - Replit has limited CPU, memory, and disk space.
   - Use smaller batch sizes and fewer workers.
   - Enable mock data and mock embeddings to reduce resource usage.

2. **File System Permissions**:
   - Replit has specific file system permissions.
   - Use relative paths from the project root.
   - Avoid writing to system directories.

3. **Environment Detection**:
   - The system auto-detects Replit using environment variables.
   - You can force the environment with `FORCE_ENVIRONMENT=replit`.

4. **Startup Configuration**:
   - The `.replit` file configures the startup process.
   - It sets resource-optimized parameters automatically.
   - Health checks are configured with longer timeouts for Replit.

### Docker Environment

1. **Volume Management**:
   - Use Docker volumes for data persistence.
   - Set appropriate permissions for container users.

2. **Resource Allocation**:
   - Configure appropriate CPU and memory limits.
   - Adjust worker counts based on available resources.

3. **Network Configuration**:
   - Expose necessary ports for API access.
   - Configure health checks for container orchestration.

## Decision Guidance

- Clearly document and communicate your chosen workflow within your team.
- Regularly review and update these guidelines as your project evolves.
- Consider the specific constraints of each environment when choosing a workflow.