---
description: Use when configuring FASTAPI endpoints or API request maintenance
globs: 
alwaysApply: false
---
You are an expert in Python & FastAPI architecture, security, performance, and DevOps.
Follow **every** directive below whenever you read, write, refactor, or review FastAPI code.

---

## 1  Key Principles

* Write concise, technical code; accompany examples when helpful.
* Prefer functional, declarative programming; avoid classes unless they add clear value.
* Use descriptive names with auxiliary verbs (`is_active`, `has_permission`).
* Follow the *Receive-an-Object → Return-an-Object* (RORO) pattern.
* Type-annotate everything; rely on Pydantic v2 models for validation and serialization.
* Favour iteration and modularisation over duplication.

## 2  Project Structure & Organisation

| Concern                  | Rule                                                                                                          |
| ------------------------ | ------------------------------------------------------------------------------------------------------------- |
| **Layout**               | Domain-centric: `app/<domain>/` → `routes.py`, `schemas.py`, `models.py`, `services.py`, `deps.py`, `tests/`. |
| **Core utilities**       | Centralise config, logging, security, and middleware helpers in `core/`.                                      |
| **Naming**               | Use lowercase\_with\_underscores for files & directories.                                                     |
| **Routers**              | Register every `APIRouter` in `main.py` under a versioned prefix (`/v1/<domain>`).                            |
| **Dependency Injection** | Provide shared resources via `Depends()`; never construct DB sessions or clients ad-hoc.                      |
| **Startup/Shutdown**     | Prefer lifespan context managers over `@app.on_event`.                                                        |
| **Middleware**           | Global middleware for logging, metrics, CORS, authentication, error handling.                                 |
| **Config**               | Single Pydantic `Settings` class loaded from environment variables/secret manager.                            |

## 3  API Design & Documentation

* Match CRUD actions to HTTP verbs (GET, POST, PUT/PATCH, DELETE).
* Return precise status codes: **201** create, **204** delete, **400/422** validation, **401/403** auth, **404** not-found.
* Every request/response is a Pydantic model—never raw dicts.
* Validate & sanitise inputs at the boundary; raise `HTTPException` with structured JSON errors.
* Implement central exception handlers for uniform error payloads.
* Enrich OpenAPI with tags, summaries, descriptions, examples, and documented error schemas.

## 4  Data Models

* Distinguish **transport schemas** (Pydantic) from **persistence models** (SQLAlchemy / SQLModel).
* Use `Field()` for constraints, examples, and aliases; add complex validation via `@field_validator`.
* Employ inheritance hierarchies such as `Base`, `Create`, `Update`, `Read`.
* Provide custom `json_encoders` or validators for complex types.

## 5  Database Interaction

* Use an **async ORM**: SQLAlchemy 2 (async engine) or equivalent.
* Manage schema changes with Alembic (one revision per change).
* Supply DB session via `yield SessionLocal()` dependency; tune connection pooling for target platform.
* Wrap multi-step ops in `async with session.begin()` for atomicity.
* Optimise queries (eager loading, indexing, avoid N+1); monitor with EXPLAIN.
* Translate DB errors to 409 (conflict) or 500 (server error).

## 6  Authentication & Authorization

* Implement OAuth2 with JWT (access + refresh).
* Hash passwords with `bcrypt` or `argon2`, salted & peppered.
* Enforce role/permission checks inside dependency layers, not route handlers.
* Support optional session cookies for browser flows when required.
* Respond **401** for unauthenticated, **403** for forbidden.

## 7  Security Hardening

* Restrictive CORS configuration; deny by default.
* Apply Redis-backed or gateway rate limiting.
* Validate & sanitise all inputs; prevent XSS/SQLi.
* Set security headers: HSTS, CSP, X-Content-Type-Options, X-Frame-Options.
* Log auth attempts, validation failures, permission denials with context; avoid leaking secrets.

## 8  Performance & Scalability

* **Async everywhere**: DB drivers, HTTP clients, file IO.
* Cache expensive reads with Redis (keyed by route + claims).
* Off-load heavy work via `BackgroundTasks`, Celery, or RQ.
* Reuse connections; avoid per-request instantiation.
* Expose Prometheus metrics; monitor latency, throughput, error rate.

## 9  Error Handling & Validation

* Handle edge cases first; use guard clauses and early returns.
* Reserve `HTTPException` for expected errors; log & convert unexpected ones in middleware.
* Provide user-friendly error messages and unique error codes for easier tracing.

## 10  Testing Strategy

* **Pytest unit tests** for services, utils, validators.
* **Integration tests** using `TestClient`; spin up disposable DB containers.
* Use fixtures & dependency overrides; isolate externals with mocks.
* Cover success & failure paths; maintain ≥ 90 % coverage—CI fails on regression.

## 11  Deployment & Operations

* Multi-stage Dockerfile (non-root user, slim base).
* CI/CD pipeline: lint → type-check → test → scan → build → deploy → rollback.
* Secrets via env vars or secret manager—never in VCS.
* Emit structured JSON logs at INFO/ERROR; ship to central log stack.
* Expose `/health/live`, `/health/ready`, and `/metrics`; support blue-green/canary releases with auto-rollback.

## 12  Documentation & Communication

* Write meaningful docstrings for public modules, classes, functions.
* Keep OpenAPI examples & error schemas up-to-date; mark deprecated endpoints.
* Version the API (`/v1/`, `/v2/`) or negotiate via headers; document breaking changes.
* Provide a clear README / docs site: auth flow, sample requests, error formats, contribution guide.

---

**Adhere to these rules before merging any code or approving any design decision.**
